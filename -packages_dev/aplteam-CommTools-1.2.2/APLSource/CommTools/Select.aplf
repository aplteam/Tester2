 index←{x}Select choices;flag;answer;question;value;bool;⎕ML;⎕IO;manyFlag;mustFlag;caption;buff;flag2;alias;blankFlag
⍝ Presents `choices` as a numbered list and allows the user to select either exactly one or multiple ones.
⍝ One is the default.\\
⍝ The optional left argument allows you to specify multiple (positional) choices:
⍝ * `caption` is shown above the choices.
⍝ * `manyFlag` defaults to 0 (meaning just one item might be selected) or 1, in which case multiple items can be specified.
⍝ * `mustFlag` forces the user to select at least one  option.\\
⍝ Notes:
⍝  * `choices` must not have more than 999 items.\\
⍝  * By entering "`∘∘∘`" the user may interrupt `Select`: this activates a stop.
⍝  * If the user aborts by entering "q" (for "quit") `⍬` will be returned.
 x←{0<⎕NC ⍵:⊆⍎⍵ ⋄ ''}'x'
 (caption manyFlag mustFlag)←x,(⍴,x)↓'' 0 0
 ⎕IO←1 ⋄ ⎕ML←1
 'Invalid right argument; must be a vector of text vectors.'⎕SIGNAL ErrNo/⍨2≠|≡choices
 'Right argument has more than 999 items'⎕SIGNAL ErrNo/⍨999<≢choices
 flag←0
 :If 0<⎕NC'Select_Choices'
     Select_Choices←(0<≢¨Select_Choices[;1])⌿Select_Choices
 :AndIf 0<≢Select_Choices
     :If '@'∊caption
         (alias caption)←{l←⍵⍳'@' ⋄ (l↑⍵)(l↓⍵)}caption
         flag←0<+/bool←({⍵↑⍨⍵⍳'@'}¨Select_Choices[;1])≡¨⊂alias
     :Else
         :If 0=+/bool←Select_Choices[;1]≡¨⊂caption
             bool←caption∘{⍵≡⍺↑⍨≢⍵}¨Select_Choices[;1]
         :EndIf
         flag←0<+/bool
     :EndIf
     :If flag
         'Multiple choices qualify?!'Assert 1=+/bool
         index←2⊃Select_Choices[bool⍳1;]
         :If (⊂index)∊0 ⍬
             index←⍬
         :ElseIf ' '=1↑0⍴∊index ⍝ Text?!
             :If (,'a')≡,index
                 index←⍳≢choices
             :ElseIf (,'q')≡,index
                 index←⍬
             :ElseIf 0<≢buff←⍸index∘≡¨choices
                 index←buff
             :ElseIf 1=≢index←⍸index∘≡¨(≢index)↑¨{⍵↓⍨+/∧\' '=⍵}¨choices
                 index←⊃index
             :Else
                 'Invalid selection'Assert 0
             :EndIf
         :Else
             'Invalid selection'Assert∧/index∊⍳≢choices
         :EndIf
     :EndIf
 :EndIf
 :If ~flag
     flag2←0
     :Repeat
         blankFlag←0≠≢caption
         ⎕←{⍵↑'---',(blankFlag/' '),({'@'∊⍵:⍵↓⍨⍵⍳'@' ⋄⍵}caption),(blankFlag/' '),⍵⍴'-'}⎕PW-1
         ⎕←⍪{((⊂'. '),¨⍨(⊂3 0)⍕¨⍳≢⍵),¨⍵}choices
         ⎕←''
         question←'Select one ',(manyFlag/'or more '),'item',((manyFlag)/'s'),' '
         question,←((manyFlag∨~mustFlag)/'('),((~mustFlag)/'q=quit'),((manyFlag∧~mustFlag)/', '),(manyFlag/'a=all'),((manyFlag∨~mustFlag)/')'),' :'
         :If 0<≢answer←⍞,0/⍞←question
             answer←(⍴question)↓answer
             :If '∘∘∘'≡¯3↑answer
                 (1+⊃⎕LC)⎕STOP⊃⎕SI
                 ∘∘∘ ⍝ Deliberate stop caused by user input
             :EndIf
             :If 1=≢answer
             :AndIf answer∊'Qq',manyFlag/'Aa'
                 :If answer∊'Qq'
                     :If 0=mustFlag
                         index←⍬
                         flag2←1
                     :EndIf
                 :Else
                     index←⍳≢choices
                     flag2←1
                 :EndIf
             :Else
                 (bool value)←⎕VFI answer
                 :If ∧/bool
                 :AndIf manyFlag∨1=+/bool
                     value←bool/value
                 :AndIf ∧/value∊⍳⍴choices
                     index←value
                     flag2←0≠≢index
                 :EndIf
             :EndIf
         :EndIf
     :Until flag2
     index←{1<≢⍵:⍵ ⋄ ⊃⍵}⍣(⍬≢index)⊣index
 :EndIf
⍝Done
